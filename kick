File Structures Lab Manual
1. Write a C++ program to read series of names, one per line, from standard input and
write these names spelled in reverse order to the standard output using I/O
redirection and pipes.
#include<iostream.h>
#include<string.h>
#include<fstream.h>
int main()
{
char s1[25];
fstream file1,file2;
int i=0,j=0,x=0,c=0,kb=0;
char filename1[25],filename2[25];
cout<<endl<<"1 for standard i/o:"<<endl<<"2 for file i/o:"<<endl<<"enter your choice:" ;
cin>>kb;
switch(kb)
{
case 1:cout<<"enter name count:" ;
cin>>c;
for(j=1;j<=c;j++)
{
cout<<endl<<"enter name"<<j<<":" ;
cin>>s1;
x=strlen(s1);
cout<<"reversed name"<<j<<":" ;
Department of IS&E ,VVIET
1File Structures Lab Manual
for(i=x-1;i>=0;i--)
cout<<s1[i];
cout<<endl;
}
break;
case 2:cout<<"enter data filename:";
cin>>filename1;
cout<<"enter reversed data filename:";
cin>>filename2;
file1.open(filename1,ios::in);
file2.open(filename2,ios::out);
while(1)
{
file1.getline(s1,25);
if(file1.fail())
break;
x=strlen(s1);
for(i=x-1;i>=0;i--)
file2<<s1[i];
file2<<endl;
}
file1.close();
Department of IS&E ,VVIET
2File Structures Lab Manual
file2.close();
break;
}
//
return 1;
}
// output
for io direction create a file with name in.txt
with content
1
2
abc
xyz
then go to DOS shell or exit i.e go to command prompt and type
C:\tc\bin>program1.exe<in.txt>out.txt
then exit from command prompt
then go to file open out.txt
it will contain the reversed name i.e
cba
zyx
Department of IS&E ,VVIET
3File Structures Lab Manual
2. Write a C++ program to read and write student objects with fixed-length records
and the fields delimited by “|”.Implement pack(), unpack(), modify() and search()
methods​ .
#include<iostream.h>
#include<fstream.h>
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
#define SIZE 55
char buffer[SIZE+1];
class student
{
char usn[15];
char name[20];
char age[5];
char marks[10];
public:
void getdata();
void putdata();
void pack();
void unpack();
void insert();
void display();
void modify(char *key);
void search(char *key);
};
void student::getdata()
{
cout<<"Enter Usn,name,age,marks:\n";
cin>>usn>>name>>age>>marks;
}
Department of IS&E ,VVIET
4File Structures Lab Manual
void student::putdata()
{
cout<<usn<<"\t\t"<<name<<"\t"<<age<<"\t"<<marks<<endl;
}
void student::pack()
{
strcpy(buffer,usn); strcat(buffer,"|");
strcat(buffer,name); strcat(buffer,"|");
strcat(buffer,age); strcat(buffer,"|");
strcat(buffer,marks);
while(strlen(buffer)<SIZE-1)
{
strcat(buffer,"#");
}
strcat(buffer,"\n");
}
void student::unpack()
{
char *p;
p=strtok(buffer,"|"); strcpy(usn,p);
p=strtok(NULL,"|"); strcpy(name,p);
p=strtok(NULL,"|"); strcpy(age,p);
p=strtok(NULL,"#"); strcpy(marks,p);
}
void student::insert()
{
getdata();
pack();
ofstream fout("record.txt",ios::app);
fout<<buffer;
fout.close();
}
void student::display()
{
Department of IS&E ,VVIET
5File Structures Lab Manual
ifstream fin("record.txt");
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail())
break;
unpack();
putdata();
}
fin.close();
}
void student::search(char *key)
{
ifstream fin("record.txt");
int count=0;
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
putdata();
count++;
}
}
cout<<"total records found:"<<count<<endl;
fin.close();
}
void student::modify(char *key)
{
ifstream fin("record.txt");
ofstream fout("temp.txt");
int count=0;
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
Department of IS&E ,VVIET
6File Structures Lab Manual
if(fin.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
getdata();
count++;
}
pack();
fout<<buffer;
}
if(count==0)
cout<<"USN not found:"<<endl;
else
cout<<"Modified."<<endl;
fin.close();
fout.close();
remove("record.txt");
rename("temp.txt","record.txt");
}
int main()
{
int choice;
student s;
char key[15];
clrscr();
while(1)
{
cout<<"1.insert\n"<<"2.display\n"<<"3.search\n"<<"4.modify\n"<<"5.exit\n"<<e
ndl;
cin>>choice;
switch(choice)
{
case 1: s.insert();
cout<<"Done!\n";
break;
case 2: cout<<"The contents are:"<<endl;
Department of IS&E ,VVIET
7File Structures Lab Manual
s.display();
cout<<"Done!\n";
break;
case 3: cout<<"Enter the key USN:";
cin>>key;
s.search(key);
cout<<"Done!\n";
break;
case 4: cout<<"Enter the usn to modify:";
cin>>key;
s.modify(key);
cout<<"Done!\n";
break;
default:
exit(0);
}
}
}
/* output
************ Using fixed- length records **************
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 1
Enter the USN, name, age, marks:
1 abhi 20 678
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 1
Enter the USN, name, age, marks:
2 adhi 20 578
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 2
1 abhi 20 678 #######
2 adhi 20 578 #######
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 3
Enter the key USN: 1
1 abhi 20 678 #######
Total records found: 1
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Department of IS&E ,VVIET
8File Structures Lab Manual
Enter the choice: 4
Enter the key usn to modify : 1
Enter the USN, name, age, marks
3 ad 20 675
Modified
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 2
2 adhi 20 578 #######
3 ad 20 675 ######
Done!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 5
*/
3. Write the C++ program to read and write student objects with variable-length
records using any suitable record structure. Implement the pack(), unpack(),
modify() and search() methods.
#include<iostream.h>
#include<fstream.h>
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<process.h>
#define SIZE 55
char buffer[SIZE+1];
class student
{
char usn[15];
char name[20];
char age[5];
char marks[10];
public:
void getdata();
void putdata();
void pack();
void unpack();
void insert();
void display();
Department of IS&E ,VVIET
9File Structures Lab Manual
void modify(char *key);
void search(char *key);
};
void student::getdata()
{
cout<<"Enter Usn,name,age,marks:\n";
cin>>usn>>name>>age>>marks;
}
void student::putdata()
{
cout<<usn<<"\t\t"<<name<<"\t"<<age<<"\t"<<marks<<endl;
}
void student::pack()
{
strcpy(buffer,usn); strcat(buffer,"|");
strcat(buffer,name); strcat(buffer,"|");
strcat(buffer,age); strcat(buffer,"|");
strcat(buffer,marks);
strcat(buffer,"\n");
}
void student::unpack()
{
char *p;
p=strtok(buffer,"|"); strcpy(usn,p);
p=strtok(NULL,"|"); strcpy(name,p);
p=strtok(NULL,"|"); strcpy(age,p);
p=strtok(NULL,"\n"); strcpy(marks,p);
}
void student::insert()
{
getdata();
pack();
ofstream fout("record.txt",ios::app);
fout<<buffer;
Department of IS&E ,VVIET
10File Structures Lab Manual
fout.close();
}
void student::display()
{
ifstream fin("record.txt");
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail())
break;
unpack();
putdata();
}
fin.close();
}
void student::search(char *key)
{
ifstream fin("record.txt");
int count=0;
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
putdata();
count++;
}
}
cout<<"total records found:"<<count<<endl;
fin.close();
}
void student::modify(char *key)
{
Department of IS&E ,VVIET
11File Structures Lab Manual
ifstream fin("record.txt");
ofstream fout("temp.txt");
int count=0;
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
getdata();
count++;
}
pack();
fout<<buffer;
}
if(count==0)
cout<<"USN not found:"<<endl;
else
cout<<"Modified."<<endl;
fin.close();
fout.close();
remove("record.txt");
rename("temp.txt","record.txt");
}
int main()
{
int choice;
student s;
char key[15];
clrscr();
while(1)
{
Department of IS&E ,VVIET
12File Structures Lab Manual
cout<<"1.insert\n"<<"2.display\n"<<"3.search\n"<<"4.modify\n"<<"5.exit\n"<<e
ndl;
cin>>choice;
switch(choice)
{
case 1: s.insert();
cout<<"Done!\n";
break;
case 2: cout<<"The contents are:"<<endl;
s.display();
cout<<"Done!\n";
break;
case 3: cout<<"Enter the key USN:";
cin>>key;
s.search(key);
cout<<"Done!\n";
break;
case 4: cout<<"Enter the usn to modify:";
cin>>key;
s.modify(key);
cout<<"Done!\n";
break;
default:
exit(0);
}
}
}
/* ​ Output
*************** ​ Variable length record​ *****************
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 1
Enter the USN, name, age, marks
1 Abhi 20 100
Done...!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 2
The contents are:
Department of IS&E ,VVIET
13File Structures Lab Manual
1 Abhi 20 100
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 3
Enter the key USN: 1
1 Abhi 20 100
Total records found: 1
Done....!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 4
Enter the USN, name, age, marks:
2 adhi 20 90
Modified...!
1: Insert 2: Display 3: Search 4: Modify 5: Exit
Enter the choice: 2
The contents are:
2 Adhi 20 90
Done....!
*/
4. Write the C++ program to write student objects with variable length records using
any suitable record structure and to read from this file a student record using RRN
#include<iostream.h>
#include<fstream.h>
#include<stdio.h>
#include<conio.h>
#include<string.h>
#include<stdlib.h>
#define SIZE 55
char buffer[SIZE+1];
int globalRRN=0;
class student
{
Department of IS&E ,VVIET
14File Structures Lab Manual
char rrn[15];
char name[20];
char age[5];
char marks[10];
public:
void getdata();
void putdata();
void pack();
void unpack();
void insert();
void display();
void modify(char *key);
void search(char *key);
};
void student::getdata()
{
cout<<"Enter rrn,name,age,marks:\n";
cin>>rrn>>name>>age>>marks;
itoa(++globalRRN,rrn,10);
}
void student::putdata()
{
cout<<rrn<<"\t\t"<<name<<"\t"<<age<<"\t"<<marks<<endl;
}
void student::pack()
{
strcpy(buffer,rrn); strcat(buffer,"|");
strcat(buffer,name); strcat(buffer,"|");
strcat(buffer,age); strcat(buffer,"|");
strcat(buffer,marks);
strcat(buffer,"\n");
}
void student::unpack()
{
char *p;
Department of IS&E ,VVIET
15File Structures Lab Manual
p=strtok(buffer,"|"); strcpy(rrn,p);
p=strtok(NULL,"|"); strcpy(name,p);
p=strtok(NULL,"|"); strcpy(age,p);
p=strtok(NULL,"\n"); strcpy(marks,p);
}
void student::insert()
{
getdata();
pack();
ofstream fout("record.txt",ios::app);
fout<<buffer;
fout.close();
}
void student::display()
{
ifstream fin("record.txt");
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail())
break;
unpack();
putdata();
}
fin.close();
}
void student::search(char *key)
{
ifstream fin("record.txt");
int count=0;
while(!fin.eof())
{
fin.getline(buffer,SIZE+1,'\n');
if(fin.fail()) break;
unpack();
Department of IS&E ,VVIET
16File Structures Lab Manual
if(strcmp(rrn,key)==0)
{
putdata();
count++;
}
}
cout<<"total records found:"<<count<<endl;
fin.close();
}
int main()
{
int choice;
student s;
char key[15];
clrscr();
while(1)
{
cout<<"1.insert\n"<<"2.display\n"<<"3.search\n"<<"4.exit\n"<<endl;
cin>>choice;
switch(choice)
{
case 1: s.insert();
cout<<"Done!\n";
break;
case 2: cout<<"The contents are:"<<endl;
s.display();
cout<<"Done!\n";
break;
case 3: cout<<"Enter the RRN:";
cin>>key;
s.search(key);
cout<<"Done!\n";
break;
default: exit(0);
}
}
}
Department of IS&E ,VVIET
17File Structures Lab Manual
/* Output
********** variable length record using RRN ***********
1: Insert 2: Display 3: Search 4: Exit
Enter the choice: 1
Enter the RRN, name, age, marks
1 Abhi 20 100
Done...!
1: Insert 2: Display 3: Search 4: Exit
Enter the choice: 2
The contents are:
1 Abhi 20 100
1: Insert 2: Display 3: Search 4: Exit
Enter the choice: 3
Enter the key RRN: 1
1 Abhi 20 100
Total records found: 1
Done....!
*/
5. Write a C++ program to implement simple index on primary key for a file of
student objects. Implement add(), search(), delete() using the index.
#include<iostream.h>
#include<fstream.h>
#include<string.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
Department of IS&E ,VVIET
18File Structures Lab Manual
#define SIZE 40
int globalRRN=0;
char buffer[SIZE+1];
class student
{
char usn[15];
char name[20];
char age[10];
char marks[10];
public:
void pack();
void unpack();
void getdata();
void putdata();
void insert();
void display();
void search(char *key);
void delet(char *key);
};
int cmp(const void *a,const void *b)
{
return(strcmp((char*)a,(char*)b));
}
void sortIndexFile()
{
char array[20][40];
ifstream index("index.txt");
ofstream temp("temp.txt");
int i=0,n=0;
while(!index.eof())
{
index.getline(array[i++],40,'\n');
if(index.fail())
break;
Department of IS&E ,VVIET
19File Structures Lab Manual
n++;
}
qsort(array,n,40,cmp);
for(i=0;i<n;i++)
{
temp<<array[i]<<endl;
}
index.close();
temp.close();
remove("index.txt");
rename("temp.txt","index.txt");
}
void student::pack()
{
strcpy(buffer,usn); strcat(buffer,"|");
strcat(buffer,name); strcat(buffer,"|");
strcat(buffer,age); strcat(buffer,"|");
strcat(buffer,marks); strcat(buffer,"#");
while(strlen(buffer)<SIZE-1)
{
strcat(buffer,"#");
}
strcat(buffer,"\n");
}
void student::unpack()
{
char *p;
p=strtok(buffer,"|"); strcpy(usn,p);
p=strtok(NULL,"|"); strcpy(name,p);
p=strtok(NULL,"|"); strcpy(age,p);
p=strtok(NULL,"#"); strcpy(marks,p);
}
void student::getdata()
{
Department of IS&E ,VVIET
20File Structures Lab Manual
cout<<"Enter the USN,name,age,marks:\n";
cin>>usn>>name>>age>>marks;
}
void student::putdata()
{
cout<<usn<<"\t"<<name<<"\t"<<age<<"\t"<<marks<<endl;
}
void student::insert()
{
ofstream index("index.txt",ios::app);
ofstream rec("record.txt",ios::app);
getdata();
index<<name<<"|"<<usn<<"|"<<++globalRRN<<"\n";
pack();
rec<<buffer;
index.close();
rec.close();
sortIndexFile();
}
void student::display()
{
ifstream index("index.txt");
ifstream rec("record.txt");
char _usn[15],_rrn[10];
int pos;
while(!index.eof())
{
index.getline(_usn,15,'|');
if(index.fail()) break;
index.getline(_rrn,10,'\n');
pos=atoi(_rrn);
rec.seekg((pos-1)*(SIZE+1),ios::beg);
rec.getline(buffer,SIZE+1,'\n');
if(rec.fail()) break;
unpack();
Department of IS&E ,VVIET
21File Structures Lab Manual
if(strcmp(_usn,usn)==0)
{
putdata();
}
}
index.close();
rec.close();
}
void student::search(char *key)
{
ifstream index("index.txt");
ifstream rec("record.txt");
char _usn[15],_rrn[10];
int pos,count=0;
while(!index.eof())
{
index.getline(_usn,15,'|');
if(index.fail()) break;
index.getline(_rrn,10,'\n');
pos=atoi(_rrn);
if(strcmp(_usn,key)!=0)continue;
rec.seekg((pos-1)*(SIZE+1),ios::beg);
rec.getline(buffer,SIZE+1,'\n');
unpack();
if(strcmp(_usn,usn)==0)
{
putdata();
count++;
}
}
if(count==0)
cout<<"Not found\n";
index.close();
rec.close();
}
void student::delet(char *key)
{
Department of IS&E ,VVIET
22File Structures Lab Manual
ifstream rec("record.txt");
ofstream temp("temp.txt");
int count=0;
while(!rec.eof())
{
rec.getline(buffer,SIZE+1,'\n');
if(rec.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
strcpy(usn,"*");
count++;
}
pack();
if(!rec.fail())
temp<<buffer;
}
if(count==0)
cout<<"Not found\n";
rec.close();
temp.close();
remove("record.txt");
rename("temp.txt","record.txt");
}
int main()
{
int choice;
student s;
char key[15];
clrscr();
ofstream index("index.txt",ios::trunc);
index.close();
ofstream rec("record.txt",ios::trunc);
rec.close();
while(1)
{
cout<<"1:insert\n"<<"2:display\n"<<"3:search\n"<<"4:delete\n"<<"5:exit\n";
Department of IS&E ,VVIET
23File Structures Lab Manual
cin>>choice;
switch(choice)
{
case 1: s.insert();
cout<<"Done!";
break;
case 2: cout<<"The contents are:";
s.display();
cout<<"done!";
break;
case 3: cout<<"enter the key USN:";
cin>>key;
s.search(key);
cout<<"done!"<<endl;
break;
case 4:
cout<<"enter the USN to delete:";
cin>>key;
s.delet(key);
cout<<"done!"<<endl;
break;
default:return 0;
}
}
}
/* output
******** implementing simple index on primary key **********
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 1
Enter USN, name, age, marks
Department of IS&E ,VVIET
24File Structures Lab Manual
1 Abhi 20 675
Done!
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 2
1 Abhi 20 675 ###########
Done!
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 3
Enter the USN to search: 1
1 Abhi 20 675 ############
Done!
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 4
Enter the USN to delete: 1
1 Abhi 20 675 ###########
Done!
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 3
Enter the usn to search: 1
Not found...!
Done!
1: Insert 2: Display 3: Search 4: Delete 5: Exit
Enter the choice: 5
*/
Department of IS&E ,VVIET
25File Structures Lab Manual
6. Write a C++ program to implement index on secondary key, name, for a file of
student objects. Implement add(), search(), delete()
using the secondary index.
#include<iostream.h>
#include<fstream.h>
#include<string.h>
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define SIZE 40
int globalRRN=0;
char buffer[SIZE+1];
class student
{
char usn[15];
char name[20];
char age[10];
char marks[10];
public:
void pack();
void unpack();
void getdata();
void putdata();
void insert();
void display();
void search(char *key);
void delet(char *key);
int displayUsnFound(char *keyname);
};
int cmp(const void *a,const void *b)
Department of IS&E ,VVIET
26File Structures Lab Manual
{
return(strcmp((char*)a,(char*)b));
}
void sortIndexFile()
{
char array[20][40];
ifstream index("index.txt");
ofstream temp("temp.txt");
int i=0,n=0;
while(!index.eof())
{
index.getline(array[i++],40,'\n');
if(index.fail())
break;
n++;
}
qsort(array,n,40,cmp);
for(i=0;i<n;i++)
{
temp<<array[i]<<endl;
}
index.close();
temp.close();
remove("index.txt");
rename("temp.txt","index.txt");
}
void student::pack()
{
strcpy(buffer,usn); strcat(buffer,"|");
strcat(buffer,name); strcat(buffer,"|");
strcat(buffer,age); strcat(buffer,"|");
strcat(buffer,marks); strcat(buffer,"#");
while(strlen(buffer)<SIZE-1)
{
strcat(buffer,"#");
Department of IS&E ,VVIET
27File Structures Lab Manual
}
strcat(buffer,"\n");
}
void student::unpack()
{
char *p;
p=strtok(buffer,"|"); strcpy(usn,p);
p=strtok(NULL,"|"); strcpy(name,p);
p=strtok(NULL,"|"); strcpy(age,p);
p=strtok(NULL,"#"); strcpy(marks,p);
}
void student::getdata()
{
cout<<"Enter the USN,name,age,marks:\n";
cin>>usn>>name>>age>>marks;
}
void student::putdata()
{
cout<<usn<<"\t"<<name<<"\t"<<age<<"\t"<<marks<<endl;
}
void student::insert()
{
ofstream index("index.txt",ios::app);
ofstream rec("record.txt",ios::app);
getdata();
index<<name<<"|"<<usn<<"|"<<++globalRRN<<"\n";
pack();
rec<<buffer;
index.close();
rec.close();
sortIndexFile();
}
void student::display()
Department of IS&E ,VVIET
28File Structures Lab Manual
{
ifstream index("index.txt");
ifstream rec("record.txt");
char _name[20],_usn[15],_rrn[10];
int pos;
while(!index.eof())
{
index.getline(_name,20,'|');
if(index.fail()) break;
index.getline(_usn,15,'|');
index.getline(_rrn,10,'\n');
pos=atoi(_rrn);
rec.seekg((pos-1)*(SIZE+1),ios::beg);
rec.getline(buffer,SIZE+1,'\n');
if(rec.fail()) break;
unpack();
if(strcmp(_usn,usn)==0)
{
putdata();
}
}
index.close();
rec.close();
}
void student::search(char *key)
{
ifstream index("index.txt");
ifstream rec("record.txt");
char _name[20],_usn[15],_rrn[10];
int pos,count=0;
while(!index.eof())
{
index.getline(_name,20,'|');
if(index.fail()) break;
index.getline(_usn,15,'|');
index.getline(_rrn,10,'\n');
Department of IS&E ,VVIET
29File Structures Lab Manual
pos=atoi(_rrn);
if(strcmp(_usn,key)!=0)continue;
rec.seekg((pos-1)*(SIZE+1),ios::beg);
rec.getline(buffer,SIZE+1,'\n');
unpack();
if(strcmp(_usn,usn)==0)
{
putdata();
count++;
}
}
if(count==0)
cout<<"Not found\n";
index.close();
rec.close();
}
void student::delet(char *key)
{
ifstream rec("record.txt");
ofstream temp("temp.txt");
int count=0;
while(!rec.eof())
{
rec.getline(buffer,SIZE+1,'\n');
if(rec.fail()) break;
unpack();
if(strcmp(usn,key)==0)
{
strcpy(usn,"*");
strcpy(name,"*");
count++;
}
pack();
if(!rec.fail())
temp<<buffer;
}
Department of IS&E ,VVIET
30File Structures Lab Manual
if(count==0)
cout<<"Not found\n";
rec.close();
temp.close();
remove("record.txt");
rename("temp.txt","record.txt");
}
int student::displayUsnFound(char *keyname)
{
ifstream index("index.txt");
char _name[20],_usn[15],_rrn[10];
int found=0;
while(!index.eof())
{
index.getline(_name,20,'|');
if(index.fail())
break;
index.getline(_usn,15,'|');
index.getline(_rrn,10,'|');
if(strcmp(_name,keyname)==0)
{
cout<<_name<<"\t\t"<<_usn<<endl;
found=1;
}
}
return found;
}
int main()
{
int choice,found;
student s;
char key[15],name[20];
clrscr();
ofstream index("index.txt",ios::trunc);
index.close();
Department of IS&E ,VVIET
31File Structures Lab Manual
ofstream rec("record.txt",ios::trunc);
rec.close();
while(1)
{
cout<<"1:insert\n"<<"2:display\n"<<"3:search\n"<<"4:delete\n"<<"5:exit\n";
cin>>choice;
switch(choice)
{
case 1: s.insert();
cout<<"Done!";
break;
case 2: cout<<"The contents are:";
s.display();
cout<<"done!";
break;
case 3: cout<<"enter the key name:";
cin>>name;
found=s.displayUsnFound(name);
if(found)
{
cout<<"Choose a USN:";
cin>>key;
s.search(key);
}
else
{
cout<<"Not found\n";
}
cout<<"done!"<<endl;
break;
case 4:
cout<<"enter the name to delete:";
cin>>name;
found=s.displayUsnFound(name);
if(found)
Department of IS&E ,VVIET
32File Structures Lab Manual
{
cout<<"Choose a USN:";
cin>>key;
s.delet(key);
}
else
{
cout<<"Not found\n";
}
cout<<"done!"<<endl;
break;
default:return 0;
}
}
}
/* Output
******* implementing indexing on secondary key ********
1: Insert 2: Display 3:Search 4: Delete 5: Exit
Enter the choice: 1
Enter the USN, name, age, marks
33 albert 70 99
Done!
1: Insert 2: Display 3:Search 4: Delete 5: Exit
Enter the choice: 2
The contents are:
33 albert 70 99
Done!
1: Insert 2: Display 3:Search 4: Delete 5: Exit
Enter the choice: 3
Enter the keyname: albert
33 albert 70 99
Done!
1: Insert 2: Display 3:Search 4: Delete 5: Exit
Enter the choice: 4
Enter the name to delete: albert
33 albert 70 99
Done!
1: Insert 2: Display 3:Search 4: Delete 5: Exit
Department of IS&E ,VVIET
33File Structures Lab Manual
Enter the choice: 4
Not found!!
Done!
*/
7. Write a C++ program to read two lists of names and then match the names in the
two lists using consequential match based on a single loop. Output the names
common to both the lists.
#include<iostream.h>
#include<fstream.h>
#include<string.h>
#include<conio.h>
int main()
{
int i, n;
char name[20], name2[20];
ofstream fout;
ifstream fin1, fin2;
clrscr();
fout.open("record1.txt");
cout << "Enter the no of names to enter in record1: ";
cin >> n;
cout << "Enter " << n << " names in ascending order: \n";
Department of IS&E ,VVIET
34File Structures Lab Manual
for(i=0; i<n; i++)
{
cin >> name;
fout << name << endl;
}
fout.close();
fout.open("record2.txt");
cout << "Enter the no of names to enter in record2: ";
cin >> n;
cout << "Enter " << n << " names in ascending order: \n";
for(i=0; i<n; i++)
{
cin >> name;
fout << name << endl;
}
fout.close();
fin1.open("record1.txt");
fin2.open("record2.txt");
fout.open("output.txt");
fin1 >> name;
fin2 >> name2;
cout<<”The common names are:\n”;
while(!fin1.eof() && !fin2.eof())
{
if(strcmp(name, name2) == 0)
{
cout<<name<<endl;
fout << name << endl;
fin1 >> name;
fin2 >> name2;
}
else
if(strcmp(name, name2) < 0)
{
fin1 >> name;
}
else
{
Department of IS&E ,VVIET
35File Structures Lab Manual
fin2 >> name2;
}
}
fin1.close();
fin2.close();
fout.close();
cout << "Done!";
getch();
return 0;
}
/* Output
************** using consequential match **************
Enter the number of names to enter in record1: 2
Enter the names in ascending order:
Abhi
Adhi
Enter the number of names to enter in record2: 2
Enter the names in ascending order:
Abhi
Ananth
Ouput.txt
The matching string are: Abhi
*/
8. Write the C++ program to read k lists of name and merge them using kway merge
algorithm with k=8.
#include<iostream.h>
#include<fstream.h>
#include<conio.h>
#include<string.h>
int allRead(int num[])
{
for(int i = 0; i < 8; i++)
{
if(num[i] != 0)
return 0;
}
return 1;
}
Department of IS&E ,VVIET
36File Structures Lab Manual
int main()
{
fstream file[8];
ofstream fout("merge.txt");
int i, j, total, min, num[8];
char name[20], array[8][20];
char fname[8][8] = {"1.txt", "2.txt", "3.txt", "4.txt",
"5.txt", "6.txt", "7.txt", "8.txt"};
clrscr();
for(i=0; i<8; i++)
{
file[i].open(fname[i], ios::out);
cout << "Enter the total no of rec in file " << i + 1 << " : ";
cin >> num[i];
cout << "Enter " << num[i] << " names in ascending order\n";
for(j=0; j<num[i]; j++)
{
cin >> name;
file[i] << name << endl;
}
file[i].close();
}
for(i=0; i<8; i++)
{
file[i].open(fname[i], ios::in);
if(num[i] != 0)
{
file[i] >> array[i];
}
else
{
strcpy(array[i], "zzzz");
}
}
cout<<”the record are:”;
while(!allRead(num))
Department of IS&E ,VVIET
37File Structures Lab Manual
{
min = 0;
for(i=1; i<8; i++)
{
if(strcmp(array[i], array[min]) < 0)
{
min = i;
}
}
if(num[min] != 0)
{
cout<<array[min]<<endl;
fout << array[min] << endl;
file[min] >> array[min];
num[min]--;
}
else
{
strcpy(array[min], "zzzz");
}
}
for(i=0; i<8; i++)
{
file[i].close();
}
fout.close();
cout << "Done...! \n";
getch();
return 0;
}
/*Output
************** K- merge algorithm ******************
Enter the total number of rec in file1: 2
Abhi
Adhi
Enter the total number of rec in file2: 2
Abhi
Ananth
Enter the total number of rec in file3: 2
Abhi
Department of IS&E ,VVIET
38File Structures Lab Manual
Chethan
Enter the total number of rec in file4: 2
Abhi
Anil
Enter the total number of rec in file5: 1
Abhi
Enter the total number of rec in file6: 1
priya
Enter the total number of rec in file7: 2
Rakshitha
Samana
Enter the total number of rec in file8:
Shankar
Merge.txt
The records are:
Abhi
Adhi
Ananth
Anil
Chethan
Priya
Rakshitha
Samana
Shankar
*/
 
Department of IS&E ,VVIET
39
